{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseURL","axios","get","then","response","data","newPerson","post","id","delete","person","put","Filter","filterNames","onChange","Form","handleChange","handleSubmit","onSubmit","name","type","Notification","message","className","PersonsList","persons","filter","handleDelete","filteredPersons","pers","toLowerCase","includes","map","key","number","onClick","App","useState","setPersons","setNewPerson","searchString","setSearchString","infoMessage","setInfoMessage","useEffect","personService","hideInfoMessage","setTimeout","replaceExistingPerson","existingPerson","window","confirm","res","index","findIndex","p","concat","catch","error","e","personToAdd","target","value","preventDefault","find","result","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e6e648e.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseURL = '/api/persons';\n\nconst getAll = () => {\n  const response = axios.get(`${baseURL}`)\n  return response.then(response => response.data)\n}\n\nconst post = newPerson => {\n  const response = axios.post(`${baseURL}`, newPerson)\n  return response.then(response => response.data)\n}\n\nconst remove = id => {\n  const response = axios.delete(`${baseURL}/${id}`)\n  return response.then(response => response.data)\n}\n\nconst replace = person => {\n  const response = axios.put(`${baseURL}/${person.id}`, person)\n  return response.then(response => response.data)\n}\n\nexport default { getAll, post, remove, replace }","import React, {useState, useEffect} from 'react';\nimport personService from './services/persons.js';\nimport './App.css';\n\nconst Filter = ({ filterNames }) => {\n  return (\n    <div>\n      Filter Phonebook: <input onChange={filterNames} />\n    </div>\n  )\n}\n\nconst Form = ({handleChange, handleSubmit}) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>name: <input name='name' onChange={handleChange}/></div>\n      <div>number: <input name='number' onChange={handleChange}/></div>\n      <div><button type=\"submit\">add</button></div>\n    </form>\n  )\n}\n\nconst Notification = ({ message }) => {\n    if (!message) return null;\n    return( \n      <div className={!message.type ? 'success' : message.type}>\n        {message.message}\n      </div>\n    );  \n}\n\nconst PersonsList = ({persons, filter, handleDelete}) => {\n  const filteredPersons = persons.filter(pers => \n      pers.name.toLowerCase().includes(filter.toLowerCase())\n  ) \n  return (\n    <div>\n      {\n       filteredPersons.map(person => \n          <li key={person.id}>\n            {person.name} {person.number}\n            <button onClick={() => handleDelete(person)}>\n              delete\n            </button>\n          </li>\n       )\n      }\n    </div>  \n  )\n}\n\nconst App = () => {\n\n  const [persons, setPersons] = useState([]);\n  const [newPerson, setNewPerson] = useState({});\n  const [searchString, setSearchString] = useState('');\n  const [infoMessage, setInfoMessage] = useState(null);\n\n  useEffect(() => {\n    personService.getAll().then(persons =>{\n      setPersons(persons);\n    });  \n  }, []);\n\n  const addPerson = () => {\n    personService.post(newPerson)\n      .then(result => {\n        setPersons(persons.concat(result));\n        setInfoMessage({\n          message: `${result.name} added to Phonebook`,\n          type: 'success'\n        });\n      })\n      .catch (error =>\n        setInfoMessage({ message: error.response.data.error, type: 'error'})\n      )\n      .then(() => hideInfoMessage());\n  }\n\n  const handleChange = e => {\n    const personToAdd = {...newPerson};\n    personToAdd[e.target.name] = e.target.value;\n    setNewPerson(personToAdd);\n  }\n\n  const handleDelete = person => {\n    if (!window.confirm(`Remove ${person.name}?`)) return;\n    personService.remove(person.id)\n      .then(() => {\n        setPersons(persons.filter(p => p.id !== person.id))\n        setInfoMessage({ \n          message: `${person.name} deleted from the server`, \n          type: 'success' \n        });\n      })\n      .catch(error => {\n        setInfoMessage({ \n          message: `${person.name} already deleted from the server.`, \n          type: 'error'\n        })\n        setPersons(persons.filter(p => p.id !== person.id));\n      })\n      .then(() => hideInfoMessage());\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const existingPerson = persons.find(\n      p => p.name.toLowerCase() === newPerson.name.toLowerCase()\n    );\n    if (existingPerson) {\n      replaceExistingPerson(existingPerson);\n    } else {\n      addPerson();\n    }\n  }\n\n  const hideInfoMessage = () => {\n    setTimeout(() => {\n      setInfoMessage(null)\n    }, 5000);\n  }\n\n  const replaceExistingPerson = (existingPerson) => {\n    if (!window.confirm(`${existingPerson.name} already exists in the phone book. Replace number?`)) \n      return;\n    personService.replace({...existingPerson, number: newPerson.number})\n      .then(res => { \n        const index = persons.findIndex(p => p.id === res.id);\n        const p = persons.concat();\n        p[index] = res;\n        setPersons(p);\n        setInfoMessage({\n          message: `Number updated for ${existingPerson.name}`,\n          type: 'success'\n        });\n      })\n      .catch (error =>\n        setInfoMessage({ message: error.response.data.error, type: 'error'})\n      )\n      .then(() => hideInfoMessage());\n  }\n\n  return (\n    <div className='App'>\n      <h1 className='header'>Phonebook</h1>\n      <Notification message={infoMessage}/>\n      <h2>Add new</h2>\n      <Form \n        handleChange={handleChange}\n        handleSubmit={handleSubmit}\n      />\n      <h2>Persons</h2>\n      <Filter filterNames={e => setSearchString(e.target.value)}/>\n      <br/>\n      <PersonsList \n        persons={persons}\n        filter={searchString}\n        handleDelete={handleDelete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}